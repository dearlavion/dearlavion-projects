# ====================
# Start ngrok tasks
# ====================

- name: Kill any existing ngrok tunnel before starting a new one
  tags: ["start"]
  shell: pkill -f "ngrok http" || true
  ignore_errors: yes

- name: Find ngrok binary path
  tags: ["start"]
  shell: which ngrok
  register: ngrok_path
  changed_when: false

- name: Set ngrok binary path fact
  tags: ["start"]
  set_fact:
    ngrok_bin: "{{ ngrok_path.stdout | default('/usr/local/bin/ngrok') }}"

- name: Check if ngrok is already installed
  tags: ["start"]
  stat:
    path: "{{ ngrok_bin }}"
  register: ngrok_stat

- name: Download ngrok (only if not installed)
  tags: ["start"]
  get_url:
    url: https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-darwin-amd64.zip
    dest: /tmp/ngrok.zip
  when: not ngrok_stat.stat.exists

- name: Unzip ngrok (only if not installed)
  tags: ["start"]
  unarchive:
    src: /tmp/ngrok.zip
    dest: "{{ ngrok_bin | dirname }}/"
    remote_src: yes
  when: not ngrok_stat.stat.exists

- name: Make ngrok executable
  tags: ["start"]
  file:
    path: "{{ ngrok_bin }}"
    mode: '0755'
    state: file
  when: not ngrok_stat.stat.exists

- name: Add ngrok authtoken
  tags: ["start"]
  shell: "{{ ngrok_bin }} config add-authtoken \"{{ ngrok_auth_token }}\""
  args:
    creates: ~/.config/ngrok/ngrok.yml

- name: Start ngrok with reserved hostname
  tags: ["start"]
  shell: nohup {{ ngrok_bin }} http {{ ngrok_local_port }} --hostname={{ ngrok_hostname }} > /tmp/ngrok.log 2>&1 &
  async: 5
  poll: 0

- name: Wait for ngrok API
  tags: ["start"]
  wait_for:
    host: 127.0.0.1
    port: 4040
    delay: 2
    timeout: 20
    state: started

- name: Check if tunnel using requested hostname is active
  tags: ["start"]
  shell: "curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[].public_url | select(. != null)'"
  register: ngrok_tunnel_check
  ignore_errors: true

- name: Set usage of fallback if hostname invalid
  tags: ["start"]
  set_fact:
    use_fallback: "{{ ngrok_hostname not in (ngrok_tunnel_check.stdout | default('')) }}"

- name: Start fallback ngrok (random domain)
  tags: ["start"]
  shell: |
    pkill -f "ngrok http {{ ngrok_local_port }}" || true
    nohup {{ ngrok_bin }} http {{ ngrok_local_port }} > /tmp/ngrok.log 2>&1 &
  async: 5
  poll: 0
  when: use_fallback | default(false)

- name: Wait for ngrok API (fallback)
  tags: ["start"]
  wait_for:
    host: 127.0.0.1
    port: 4040
    delay: 2
    timeout: 20
  when: use_fallback | default(false)

- name: Read final active tunnel URL
  tags: ["start"]
  shell: "curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url'"
  register: ngrok_public_url
  changed_when: false

- debug:
    tags: ["start", "rebuild"]
    msg: "✅ ngrok final public URL → {{ ngrok_public_url.stdout }}"

# ====================
# Stop ngrok tasks
# ====================

- name: Stop ngrok tunnel for local n8n
  shell: pkill -f "ngrok http {{ ngrok_local_port }}" || true
  ignore_errors: yes
  tags: ["stop"]

- name: Verify ngrok is no longer running
  shell: pgrep -f "ngrok http {{ ngrok_local_port }}"
  register: verify_ngrok_stop
  ignore_errors: true
  changed_when: false
  failed_when: verify_ngrok_stop.rc == 0
  tags: ["stop"]
